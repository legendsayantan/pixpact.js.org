{"version":3,"sources":["logo.svg","Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","paperSizes","A1","width","height","A3","A4","A5","Letter","Legal","Tabloid","getImageDataUrl","imgSrc","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","createElement","ctx","getContext","imageSmoothingEnabled","fillStyle","fillRect","globalCompositeOperation","drawImage","dataURL","toDataURL","onerror","src","Home","images","setImages","useState","globalScale","setGlobalScale","scaleOption","setScaleOption","columnsPerPage","setColumnsPerPage","pageFormat","setPageFormat","orientation","setOrientation","customPageWidth","setCustomPageWidth","customPageHeight","setCustomPageHeight","imageMargin","setImageMargin","popupImageIndex","setPopupImageIndex","calcPages","setCalcPages","showCalcPopup","setShowCalcPopup","activeCalcPage","setActiveCalcPage","pdfLoading","setPdfLoading","fileInputRef","useRef","closePopup","removeImage","index","prev","filter","idx","calculateLayout","pageWidth","pageHeight","parseFloat","dims","margin","scaledImages","map","override","overrideScale","isNaN","newWidth","scale","tooBig","find","alert","sort","a","b","pages","remaining","length","pagePlacements","columns","newRemaining","placed","bestColIndex","bestColY","Infinity","i","col","currentY","push","x","y","maxWidth","Math","max","newX","lastCol","previewPageStyle","scaleFactor","previewWidth","position","backgroundColor","React","className","href","target","rel","htmlFor","id","type","accept","multiple","onChange","e","Array","from","files","forEach","file","URL","createObjectURL","ref","value","checked","placeholder","Fragment","step","min","parseInt","onClick","handleCalculate","console","log","async","pdf","jsPDF","unit","format","addPage","placement","dataUrl","addImage","save","key","openPopup","alt","stopPropagation","handleOverrideChange","page","previewHeight","style","item","left","top","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a7765e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from 'react';\nimport './Home.css';\nimport { jsPDF } from 'jspdf';\n\n// All dimensions in mm for paper sizes\nconst paperSizes = {\n    A1: { width: 594, height: 841 },\n    A3: { width: 297, height: 420 },\n    A4: { width: 210, height: 297 },\n    A5: { width: 148, height: 210 },\n    Letter: { width: 215.9, height: 279.4 },\n    Legal: { width: 215.9, height: 355.6 },\n    Tabloid: { width: 279.4, height: 431.8 }\n};\n\n// Convert an image source to a DataURL using a canvas\nconst getImageDataUrl = (imgSrc) => {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = \"Anonymous\";\n        img.onload = function() {\n            const canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext('2d');\n            // Disable image smoothing to avoid unwanted artifacts.\n            ctx.imageSmoothingEnabled = false;\n            // Fill with white\n            ctx.fillStyle = '#fff';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Draw the image (using source-over).\n            ctx.globalCompositeOperation = 'source-over';\n            ctx.drawImage(img, 0, 0);\n            // Export as JPEG to avoid alpha issues.\n            const dataURL = canvas.toDataURL('image/jpeg', 1.0);\n            resolve(dataURL);\n        };\n        img.onerror = reject;\n        img.src = imgSrc;\n    });\n};\n\nconst Home = () => {\n    const [images, setImages] = useState([]);\n    const [globalScale, setGlobalScale] = useState(50);\n    const [scaleOption, setScaleOption] = useState(\"percentage\");\n    const [columnsPerPage, setColumnsPerPage] = useState(2);\n    const [pageFormat, setPageFormat] = useState(\"A4\");\n    const [orientation, setOrientation] = useState(\"portrait\");\n    const [customPageWidth, setCustomPageWidth] = useState('');\n    const [customPageHeight, setCustomPageHeight] = useState('');\n    const [imageMargin, setImageMargin] = useState(0);\n    const [popupImageIndex, setPopupImageIndex] = useState(null);\n    const [calcPages, setCalcPages] = useState(null);\n    const [showCalcPopup, setShowCalcPopup] = useState(false);\n    const [activeCalcPage, setActiveCalcPage] = useState(0);\n    const [pdfLoading, setPdfLoading] = useState(false);\n    const fileInputRef = useRef(null);\n\n    // Handle image selection\n    const handleFiles = (e) => {\n        const files = Array.from(e.target.files);\n        files.forEach((file) => {\n            const src = URL.createObjectURL(file);\n            const img = new Image();\n            img.onload = () => {\n                setImages((prev) => [\n                    ...prev,\n                    {\n                        file,\n                        src,\n                        width: img.width,\n                        height: img.height,\n                        overrideScale: '',\n                    },\n                ]);\n            };\n            img.src = src;\n        });\n    };\n\n    const openPopup = (index) => {\n        setPopupImageIndex(index);\n    };\n\n    const closePopup = () => {\n        setPopupImageIndex(null);\n    };\n\n    const handleOverrideChange = (index, value) => {\n        setImages((prev) =>\n            prev.map((img, idx) =>\n                idx === index ? { ...img, overrideScale: value } : img\n            )\n        );\n    };\n\n    const removeImage = (index) => {\n        setImages((prev) => prev.filter((img, idx) => idx !== index));\n    };\n\n    // Updated calculation algorithm using column-based packing.\n    const calculateLayout = () => {\n        let pageWidth, pageHeight;\n        if (pageFormat === \"Custom\") {\n            pageWidth = parseFloat(customPageWidth);\n            pageHeight = parseFloat(customPageHeight);\n        } else {\n            const dims = paperSizes[pageFormat];\n            pageWidth = dims.width;\n            pageHeight = dims.height;\n        }\n        if (orientation === \"landscape\") {\n            [pageWidth, pageHeight] = [pageHeight, pageWidth];\n        }\n        const margin = parseFloat(imageMargin) || 0;\n\n        // Compute scaled dimensions for each image.\n        const scaledImages = images.map((img, idx) => {\n            // If an individual override is provided, use that.\n            const override = img.overrideScale ? parseFloat(img.overrideScale) : null;\n            if (override !== null && !isNaN(override)) {\n                return {\n                    index: idx,\n                    width: img.width * (override / 100),\n                    height: img.height * (override / 100),\n                    src: img.src\n                };\n            } else if (scaleOption === \"percentage\") {\n                return {\n                    index: idx,\n                    width: img.width * (globalScale / 100),\n                    height: img.height * (globalScale / 100),\n                    src: img.src\n                };\n            } else {\n                // For fixed columns mode, adjust pageWidth first.\n                const effectivePageWidth = pageWidth - ((columnsPerPage - 1) * margin);\n                const newWidth = effectivePageWidth / columnsPerPage;\n                const scale = newWidth / img.width;\n                return {\n                    index: idx,\n                    width: newWidth,\n                    height: img.height * scale,\n                    src: img.src\n                };\n            }\n        });\n\n        // Check if any image is too big (ignoring margins).\n        const tooBig = scaledImages.find(img => img.width > pageWidth || img.height > pageHeight);\n        if (tooBig) {\n            alert(\"Image \" + (tooBig.index + 1) + \" is too big for the page. Please reduce scale.\");\n            return [];\n        }\n\n        // Sort images in descending order by area.\n        scaledImages.sort((a, b) => (b.width * b.height) - (a.width * a.height));\n\n        const pages = [];\n        let remaining = [...scaledImages];\n\n        // Pack images into pages using a column-based algorithm.\n        while (remaining.length > 0) {\n            const pagePlacements = [];\n            const columns = []; // Each column: { x, currentY, maxWidth }\n            const newRemaining = [];\n            for (let img of remaining) {\n                let placed = false;\n                let bestColIndex = -1;\n                let bestColY = Infinity;\n                // Try to place in an existing column.\n                for (let i = 0; i < columns.length; i++) {\n                    const col = columns[i];\n                    if (col.currentY + img.height <= pageHeight) {\n                        if (col.currentY < bestColY) {\n                            bestColY = col.currentY;\n                            bestColIndex = i;\n                        }\n                    }\n                }\n                if (bestColIndex !== -1) {\n                    const col = columns[bestColIndex];\n                    pagePlacements.push({\n                        index: img.index,\n                        x: col.x,\n                        y: col.currentY,\n                        width: img.width,\n                        height: img.height,\n                        src: img.src\n                    });\n                    columns[bestColIndex].currentY += img.height + margin;\n                    columns[bestColIndex].maxWidth = Math.max(columns[bestColIndex].maxWidth, img.width);\n                    placed = true;\n                } else {\n                    // Try to start a new column.\n                    let newX = 0;\n                    if (columns.length > 0) {\n                        const lastCol = columns[columns.length - 1];\n                        newX = lastCol.x + lastCol.maxWidth + margin;\n                    }\n                    if (newX + img.width <= pageWidth) {\n                        columns.push({ x: newX, currentY: img.height + margin, maxWidth: img.width });\n                        pagePlacements.push({\n                            index: img.index,\n                            x: newX,\n                            y: 0,\n                            width: img.width,\n                            height: img.height,\n                            src: img.src\n                        });\n                        placed = true;\n                    }\n                }\n                if (!placed) {\n                    // Image could not be placed on this page.\n                    newRemaining.push(img);\n                }\n            }\n            pages.push(pagePlacements);\n            if (newRemaining.length === remaining.length) {\n                // Avoid infinite loop.\n                break;\n            }\n            remaining = newRemaining;\n        }\n        return pages;\n    };\n\n\n    const handleCalculate = () => {\n        const pages = calculateLayout();\n        if (pages.length > 0) {\n            setCalcPages(pages);\n            setActiveCalcPage(0);\n            setShowCalcPopup(true);\n            console.log(\"Calculated layout:\", pages);\n        }\n    };\n\n    const handleGeneratePDF = async () => {\n        setPdfLoading(true);\n        let pageWidth, pageHeight;\n        if (pageFormat === \"Custom\") {\n            pageWidth = parseFloat(customPageWidth);\n            pageHeight = parseFloat(customPageHeight);\n        } else {\n            const dims = paperSizes[pageFormat];\n            pageWidth = dims.width;\n            pageHeight = dims.height;\n        }\n        if (orientation === \"landscape\") {\n            [pageWidth, pageHeight] = [pageHeight, pageWidth];\n        }\n        const margin = parseFloat(imageMargin) || 0;\n        const pages = calculateLayout();\n        if (pages.length === 0) {\n            setPdfLoading(false);\n            return;\n        }\n        const pdf = new jsPDF({\n            orientation: orientation,\n            unit: 'mm',\n            format: [pageWidth, pageHeight]\n        });\n        for (let p = 0; p < pages.length; p++) {\n            if (p > 0) pdf.addPage([pageWidth, pageHeight], orientation);\n            for (let placement of pages[p]) {\n                const dataUrl = await getImageDataUrl(images[placement.index].src);\n                pdf.addImage(dataUrl, 'JPEG', placement.x, placement.y, placement.width, placement.height);\n            }\n        }\n        pdf.save(\"pixpact_output_\"+images.length+\"_images.pdf\");\n        setPdfLoading(false);\n    };\n\n    // Prepare preview for the calculated page in the Calculate popup.\n    let previewPageStyle = {};\n    let scaleFactor = 1;\n    if (pageFormat) {\n        let pageWidth, pageHeight;\n        if (pageFormat === \"Custom\") {\n            pageWidth = parseFloat(customPageWidth) || 210;\n            pageHeight = parseFloat(customPageHeight) || 297;\n        } else {\n            const dims = paperSizes[pageFormat];\n            pageWidth = dims.width;\n            pageHeight = dims.height;\n        }\n        if (orientation === \"landscape\") {\n            [pageWidth, pageHeight] = [pageHeight, pageWidth];\n        }\n        const aspectRatio = pageHeight / pageWidth;\n        const previewWidth = orientation === \"landscape\" ? 500 : 300;\n        const previewHeight = previewWidth * aspectRatio;\n        scaleFactor = previewWidth / pageWidth;\n        previewPageStyle = { width: previewWidth, height: previewHeight, position: 'relative', backgroundColor: '#fff' };\n    }\n\n    return (\n        <div className=\"home-container\">\n            {pdfLoading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-spinner\">Creating PDF...</div>\n                </div>\n            )}\n            <header className=\"header-container\">\n                <h1 className=\"header-title\">PixPact</h1>\n                <div className=\"header-links\">\n                    <a href=\"https://sayantan.is-a.dev\" target=\"_blank\" rel=\"noopener noreferrer\">Developer</a>\n                    <a href=\"https://github.com/legendsayantan/pixpact\" target=\"_blank\" rel=\"noopener noreferrer\">Source Code</a>\n                </div>\n            </header>\n\n            <div className=\"main-container\">\n                <div className=\"controls\">\n                    <div className=\"file-input-container\">\n                        <label htmlFor=\"fileInput\" className=\"file-label\">\n                            Select Images\n                        </label>\n                        <input\n                            id=\"fileInput\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            multiple\n                            className=\"file-input\"\n                            onChange={handleFiles}\n                            ref={fileInputRef}\n                        />\n                    </div>\n\n                    <div className=\"page-customization\">\n                        <h3>Page Customization</h3>\n                        <div className=\"form-group\">\n                            <label>Page Format:</label>\n                            <select\n                                value={pageFormat}\n                                onChange={(e) => setPageFormat(e.target.value)}\n                                className=\"styled-select\"\n                            >\n                                <option value=\"A4\">A4</option>\n                                <option value=\"Letter\">Letter</option>\n                                <option value=\"Legal\">Legal</option>\n                                <option value=\"A1\">A1</option>\n                                <option value=\"A3\">A3</option>\n                                <option value=\"A5\">A5</option>\n                                <option value=\"Tabloid\">Tabloid</option>\n                                <option value=\"Custom\">Custom</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Orientation:</label>\n                            <div className=\"orientation-options\">\n                                <label className=\"modern-radio\">\n                                    <input\n                                        type=\"radio\"\n                                        value=\"portrait\"\n                                        checked={orientation === \"portrait\"}\n                                        onChange={(e) => setOrientation(e.target.value)}\n                                    />\n                                    <span>Portrait</span>\n                                </label>\n                                <label className=\"modern-radio\">\n                                    <input\n                                        type=\"radio\"\n                                        value=\"landscape\"\n                                        checked={orientation === \"landscape\"}\n                                        onChange={(e) => setOrientation(e.target.value)}\n                                    />\n                                    <span>Landscape</span>\n                                </label>\n                            </div>\n                        </div>\n                        {pageFormat === \"Custom\" && (\n                            <div className=\"form-group custom-dimensions\">\n                                <input\n                                    type=\"number\"\n                                    placeholder=\"Width (mm)\"\n                                    value={customPageWidth}\n                                    onChange={(e) => setCustomPageWidth(e.target.value)}\n                                    className=\"styled-input\"\n                                />\n                                <input\n                                    type=\"number\"\n                                    placeholder=\"Height (mm)\"\n                                    value={customPageHeight}\n                                    onChange={(e) => setCustomPageHeight(e.target.value)}\n                                    className=\"styled-input\"\n                                />\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"scale-customization\">\n                        <h3>Scale Customization</h3>\n                        <div className=\"form-group\">\n                            <label className=\"modern-radio\">\n                                <input\n                                    type=\"radio\"\n                                    value=\"percentage\"\n                                    checked={scaleOption === \"percentage\"}\n                                    onChange={(e) => setScaleOption(e.target.value)}\n                                />\n                                <span>Resolution Scale</span>\n                            </label>\n                            <label className=\"modern-radio\">\n                                <input\n                                    type=\"radio\"\n                                    value=\"columns\"\n                                    checked={scaleOption === \"columns\"}\n                                    onChange={(e) => setScaleOption(e.target.value)}\n                                />\n                                <span>Columns per Page</span>\n                            </label>\n                        </div>\n                        <div className=\"form-group\">\n                            {scaleOption === \"percentage\" ? (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        step=\"1\"\n                                        value={globalScale}\n                                        onChange={(e) => setGlobalScale(parseFloat(e.target.value))}\n                                        className=\"styled-input\"\n                                    />\n                                </>\n                            ) : (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        min=\"1\"\n                                        value={columnsPerPage}\n                                        onChange={(e) => setColumnsPerPage(parseInt(e.target.value, 10))}\n                                        className=\"styled-input\"\n                                    />\n                                </>\n                            )}\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Margin (px):</label>\n                        <input\n                            type=\"number\"\n                            value={imageMargin}\n                            onChange={(e) => setImageMargin(e.target.value)}\n                            className=\"styled-input\"\n                        />\n                    </div>\n\n                    <div className=\"control-btns\">\n                        <button onClick={handleCalculate} className=\"control-btn calc-btn\">\n                            Calculate\n                        </button>\n                        <button onClick={handleGeneratePDF} className=\"control-btn generate-btn\">\n                            Save as PDF\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"previews\">\n                    {images.map((img, index) => (\n                        <div key={index} className=\"preview-container\" onClick={() => openPopup(index)}>\n                            <div className=\"preview-number\">{index + 1}</div>\n                            <img\n                                src={img.src}\n                                alt={`Preview ${index}`}\n                                className=\"preview-image\"\n                            />\n                            <div className=\"overlay\">\n                <span>\n                  {img.width} x {img.height}\n                </span>\n                                <span>Scale: {img.overrideScale || \"Default\"}{img.overrideScale?\"%\":\"\"}</span>\n                            </div>\n                            <button\n                                className=\"remove-btn\"\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    removeImage(index);\n                                }}\n                            >\n                                &times;\n                            </button>\n                        </div>\n                    ))}\n                </div>\n            </div>\n\n            {/* Customise popup for individual image */}\n            {popupImageIndex !== null && (\n                <div className=\"popup-overlay\" onClick={closePopup}>\n                    <div className=\"popup\" onClick={(e) => e.stopPropagation()}>\n                        <div className=\"popup-content\">\n                            <div className=\"popup-image-container\">\n                                <img src={images[popupImageIndex].src} alt=\"Large Preview\" />\n                            </div>\n                            <div className=\"popup-controls\">\n                                <h2>Customise</h2>\n                                <p>\n                                    Image dimensions: {images[popupImageIndex].width} x {images[popupImageIndex].height}\n                                </p>\n                                <div className=\"form-group\">\n                                    <label>Override Scale (%):</label>\n                                    <input\n                                        type=\"number\"\n                                        step=\"1\"\n                                        value={images[popupImageIndex].overrideScale}\n                                        onChange={(e) =>\n                                            handleOverrideChange(popupImageIndex, e.target.value)\n                                        }\n                                        className=\"popup-input styled-input\"\n                                    />\n                                </div>\n                                <div className=\"popup-btn-group\">\n                                    <button\n                                        onClick={() => {\n                                            removeImage(popupImageIndex);\n                                            closePopup();\n                                        }}\n                                        className=\"popup-btn\"\n                                    >\n                                        Remove Image\n                                    </button>\n                                    <button onClick={closePopup} className=\"popup-btn\">\n                                        Close\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {/* Calculate Layout Popup with vertical arrangement */}\n            {showCalcPopup && calcPages && (\n                <div className=\"popup-overlay\" onClick={() => setShowCalcPopup(false)}>\n                    <div className=\"popup calc-popup-vertical\" onClick={(e) => e.stopPropagation()}>\n                        <h2 className=\"calc-heading\">Layout Calculation</h2>\n                        <div className=\"calc-tabs\">\n                            {calcPages.map((page, idx) => (\n                                <button\n                                    key={idx}\n                                    className={`calc-tab ${activeCalcPage === idx ? \"active\" : \"\"}`}\n                                    onClick={() => setActiveCalcPage(idx)}\n                                >\n                                    {idx + 1}\n                                </button>\n                            ))}\n                        </div>\n                        <div className=\"calc-preview-container-vertical\">\n                            {(() => {\n                                let pageWidth, pageHeight;\n                                if (pageFormat === \"Custom\") {\n                                    pageWidth = parseFloat(customPageWidth) || 210;\n                                    pageHeight = parseFloat(customPageHeight) || 297;\n                                } else {\n                                    const dims = paperSizes[pageFormat];\n                                    pageWidth = dims.width;\n                                    pageHeight = dims.height;\n                                }\n                                if (orientation === \"landscape\") {\n                                    [pageWidth, pageHeight] = [pageHeight, pageWidth];\n                                }\n                                const aspectRatio = pageHeight / pageWidth;\n                                const previewWidth = orientation === \"landscape\" ? 500 : 300;\n                                const previewHeight = previewWidth * aspectRatio;\n                                const scaleFactor = previewWidth / pageWidth;\n                                return (\n                                    <div\n                                        className=\"calc-preview-page\"\n                                        style={{ width: previewWidth, height: previewHeight }}\n                                    >\n                                        {calcPages[activeCalcPage].map(item => (\n                                            <img\n                                                key={item.index}\n                                                src={images[item.index].src}\n                                                alt={`Image ${item.index + 1}`}\n                                                style={{\n                                                    position: 'absolute',\n                                                    left: item.x * scaleFactor,\n                                                    top: item.y * scaleFactor,\n                                                    width: item.width * scaleFactor,\n                                                    height: item.height * scaleFactor,\n                                                }}\n                                            />\n                                        ))}\n                                    </div>\n                                );\n                            })()}\n                        </div>\n                        <button onClick={() => setShowCalcPopup(false)} className=\"popup-btn\">\n                            Close\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}