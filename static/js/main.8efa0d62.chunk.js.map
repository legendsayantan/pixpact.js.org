{"version":3,"sources":["logo.svg","PixPact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","paperSizes","A1","width","height","A3","A4","A5","Letter","Legal","Tabloid","getImageDataUrl","imgSrc","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","createElement","ctx","getContext","imageSmoothingEnabled","fillStyle","fillRect","globalCompositeOperation","drawImage","dataURL","toDataURL","onerror","src","PixPact","images","setImages","useState","globalScale","setGlobalScale","scaleOption","setScaleOption","columnsPerPage","setColumnsPerPage","pageFormat","setPageFormat","orientation","setOrientation","customPageWidth","setCustomPageWidth","customPageHeight","setCustomPageHeight","pageBorder","setPageBorder","imageMargin","setImageMargin","popupImageIndex","setPopupImageIndex","calcPages","setCalcPages","showCalcPopup","setShowCalcPopup","activeCalcPage","setActiveCalcPage","pdfLoading","setPdfLoading","fileInputRef","useRef","closePopup","removeImage","index","prev","filter","idx","calculateLayout","pageWidth","pageHeight","parseFloat","dims","margin","borderValue","availableWidth","availableHeight","scaledImages","map","override","overrideScale","isNaN","effectivePageWidth","newWidth","Math","floor","scale","tooBig","find","alert","sort","a","b","skyline","x","y","findPositionForImage","bestY","Infinity","bestX","bestNodeIndex","i","length","node","nodeIndex","updateSkyline","pos","newNode","newSkyline","push","rightEdge","newRightEdge","merged","last","max","pages","remaining","pagePlacements","newRemaining","previewPageStyle","scaleFactor","previewWidth","position","backgroundColor","React","className","href","target","rel","htmlFor","id","type","accept","multiple","onChange","e","Array","from","files","forEach","file","URL","createObjectURL","ref","value","placeholder","checked","Fragment","step","min","parseInt","onClick","handleCalculate","console","log","async","pdf","jsPDF","unit","format","addPage","placement","dataUrl","addImage","save","key","openPopup","alt","stopPropagation","handleOverrideChange","page","previewHeight","style","item","left","top","border","boxSizing","display","background","color","padding","fontSize","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8efa0d62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from 'react';\nimport './PixPact.css';\nimport { jsPDF } from 'jspdf';\n\n// All dimensions in mm for paper sizes\nconst paperSizes = {\n    A1: { width: 594, height: 841 },\n    A3: { width: 297, height: 420 },\n    A4: { width: 210, height: 297 },\n    A5: { width: 148, height: 210 },\n    Letter: { width: 215.9, height: 279.4 },\n    Legal: { width: 215.9, height: 355.6 },\n    Tabloid: { width: 279.4, height: 431.8 }\n};\n\nconst round2 = (n) => Math.round(n * 100) / 100;\n\n// Convert an image source to a DataURL using a canvas\nconst getImageDataUrl = (imgSrc) => {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = \"Anonymous\";\n        img.onload = function() {\n            const canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext('2d');\n            // Disable image smoothing to avoid unwanted artifacts.\n            ctx.imageSmoothingEnabled = false;\n            // Fill with white\n            ctx.fillStyle = '#fff';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Draw the image (using source-over).\n            ctx.globalCompositeOperation = 'source-over';\n            ctx.drawImage(img, 0, 0);\n            // Export as JPEG to avoid alpha issues.\n            const dataURL = canvas.toDataURL('image/jpeg', 1.0);\n            resolve(dataURL);\n        };\n        img.onerror = reject;\n        img.src = imgSrc;\n    });\n};\n\nconst PixPact = () => {\n    const [images, setImages] = useState([]);\n    const [globalScale, setGlobalScale] = useState(50);\n    const [scaleOption, setScaleOption] = useState(\"columns\");\n    const [columnsPerPage, setColumnsPerPage] = useState(2);\n    const [pageFormat, setPageFormat] = useState(\"A4\");\n    const [orientation, setOrientation] = useState(\"portrait\");\n    const [customPageWidth, setCustomPageWidth] = useState('');\n    const [customPageHeight, setCustomPageHeight] = useState('');\n    const [pageBorder, setPageBorder] = useState(0);\n    const [imageMargin, setImageMargin] = useState(0);\n    const [popupImageIndex, setPopupImageIndex] = useState(null);\n    const [calcPages, setCalcPages] = useState(null);\n    const [showCalcPopup, setShowCalcPopup] = useState(false);\n    const [activeCalcPage, setActiveCalcPage] = useState(0);\n    const [pdfLoading, setPdfLoading] = useState(false);\n    const fileInputRef = useRef(null);\n\n    // Handle image selection\n    const handleFiles = (e) => {\n        const files = Array.from(e.target.files);\n        files.forEach((file) => {\n            const src = URL.createObjectURL(file);\n            const img = new Image();\n            img.onload = () => {\n                setImages((prev) => [\n                    ...prev,\n                    {\n                        file,\n                        src,\n                        width: img.width,\n                        height: img.height,\n                        overrideScale: '',\n                    },\n                ]);\n            };\n            img.src = src;\n        });\n    };\n\n    const openPopup = (index) => {\n        setPopupImageIndex(index);\n    };\n\n    const closePopup = () => {\n        setPopupImageIndex(null);\n    };\n\n    const handleOverrideChange = (index, value) => {\n        setImages((prev) =>\n            prev.map((img, idx) =>\n                idx === index ? { ...img, overrideScale: value } : img\n            )\n        );\n    };\n\n    const removeImage = (index) => {\n        setImages((prev) => prev.filter((img, idx) => idx !== index));\n    };\n\n    // Updated calculation algorithm using column-based packing.\n    const calculateLayout = () => {\n        let pageWidth, pageHeight;\n        if (pageFormat === \"Custom\") {\n            pageWidth = parseFloat(customPageWidth);\n            pageHeight = parseFloat(customPageHeight);\n        } else {\n            const dims = paperSizes[pageFormat];\n            pageWidth = dims.width;\n            pageHeight = dims.height;\n        }\n        if (orientation === \"landscape\") {\n            [pageWidth, pageHeight] = [pageHeight, pageWidth];\n        }\n        const margin = parseFloat(imageMargin) || 0;\n        const borderValue = parseFloat(pageBorder) || 0;\n\n        // Define the available area inside the border.\n        const availableWidth = pageWidth - 2 * borderValue;\n        const availableHeight = pageHeight - 2 * borderValue;\n\n        // Compute scaled dimensions for each image.\n        const scaledImages = images.map((img, idx) => {\n            const override = img.overrideScale ? parseFloat(img.overrideScale) : null;\n            if (override !== null && !isNaN(override)) {\n                return {\n                    index: idx,\n                    width: img.width * (override / 100),\n                    height: img.height * (override / 100),\n                    src: img.src\n                };\n            } else if (scaleOption === \"percentage\") {\n                return {\n                    index: idx,\n                    width: img.width * (globalScale / 100),\n                    height: img.height * (globalScale / 100),\n                    src: img.src\n                };\n            } else {\n                // Fixed columns mode: use availableWidth (accounting for border)\n                const effectivePageWidth = availableWidth - ((columnsPerPage - 1) * margin);\n                const newWidth = Math.floor(effectivePageWidth / columnsPerPage);\n                const scale = newWidth / img.width;\n                return {\n                    index: idx,\n                    width: newWidth,\n                    height: img.height * scale,\n                    src: img.src\n                };\n            }\n        });\n\n        // Check if any image is too big for the available area (ignoring margins).\n        const tooBig = scaledImages.find(\n            (img) => img.width > availableWidth || img.height > availableHeight\n        );\n        if (tooBig) {\n            alert(\n                \"Image \" +\n                (tooBig.index + 1) +\n                \" is too big for the page. Please reduce scale.\"\n            );\n            return [];\n        }\n\n        // Optional: sort images (here, descending by area).\n        scaledImages.sort(\n            (a, b) => b.width * b.height - a.width * a.height\n        );\n\n        // Initialize the skyline to the top edge of the available area.\n        // The x coordinate starts at borderValue and spans availableWidth.\n        let skyline = [{ x: borderValue, width: availableWidth, y: borderValue }];\n\n        // Find a placement for an image in the current skyline.\n        const findPositionForImage = (img) => {\n            let bestY = Infinity;\n            let bestX = 0;\n            let bestNodeIndex = -1;\n            for (let i = 0; i < skyline.length; i++) {\n                const node = skyline[i];\n                if (node.width >= img.width) {\n                    // Choose the node with the smallest y (i.e. highest available position)\n                    if (node.y < bestY || (node.y === bestY && node.x < bestX)) {\n                        bestY = node.y;\n                        bestX = node.x;\n                        bestNodeIndex = i;\n                    }\n                }\n            }\n            // Ensure the image fits vertically in the available area.\n            if (\n                bestNodeIndex === -1 ||\n                bestY + img.height > borderValue + availableHeight\n            ) {\n                return null;\n            }\n            return { x: bestX, y: bestY, nodeIndex: bestNodeIndex };\n        };\n\n        // Update the skyline after placing an image, and inject a margin gap to the right.\n        const updateSkyline = (pos, img) => {\n            // New node represents the top edge of the placed image plus vertical margin.\n            let newNode = {\n                x: pos.x,\n                width: img.width,\n                y: pos.y + img.height + margin\n            };\n\n            let newSkyline = [];\n            for (let node of skyline) {\n                // If the node is completely to the left or right of the placed image...\n                if (node.x + node.width <= pos.x || node.x >= pos.x + img.width) {\n                    // For nodes to the right, shift their x by the margin to maintain horizontal spacing.\n                    if (node.x >= pos.x + img.width) {\n                        newSkyline.push({\n                            x: node.x + margin,\n                            width: node.width,\n                            y: node.y\n                        });\n                    } else {\n                        newSkyline.push(node);\n                    }\n                } else {\n                    // The node overlaps with the placed image.\n                    // Left segment (if any)\n                    if (node.x < pos.x) {\n                        newSkyline.push({\n                            x: node.x,\n                            width: pos.x - node.x,\n                            y: node.y\n                        });\n                    }\n                    // Right segment: start after the placed image plus horizontal margin.\n                    let rightEdge = node.x + node.width;\n                    let newRightEdge = pos.x + img.width + margin;\n                    if (rightEdge > newRightEdge) {\n                        newSkyline.push({\n                            x: newRightEdge,\n                            width: rightEdge - newRightEdge,\n                            y: node.y\n                        });\n                    }\n                }\n            }\n            newSkyline.push(newNode);\n\n            // Merge adjacent nodes with the same y.\n            newSkyline.sort((a, b) => a.x - b.x);\n            let merged = [];\n            for (let node of newSkyline) {\n                if (merged.length > 0) {\n                    let last = merged[merged.length - 1];\n                    if (last.y === node.y && last.x + last.width >= node.x) {\n                        last.width = Math.max(last.width, node.x + node.width - last.x);\n                        continue;\n                    }\n                }\n                merged.push(node);\n            }\n            skyline = merged;\n        };\n\n        const pages = [];\n        let remaining = [...scaledImages];\n\n        // Pack images into pages using the skyline algorithm.\n        while (remaining.length > 0) {\n            // Reset the skyline for a new page (starting at the border).\n            skyline = [{ x: borderValue, width: availableWidth, y: borderValue }];\n            const pagePlacements = [];\n            const newRemaining = [];\n\n            for (let img of remaining) {\n                let pos = findPositionForImage(img);\n                if (pos) {\n                    pagePlacements.push({\n                        index: img.index,\n                        x: pos.x,\n                        y: pos.y,\n                        width: img.width,\n                        height: img.height,\n                        src: img.src\n                    });\n                    updateSkyline(pos, img);\n                } else {\n                    // Defer the image to the next page.\n                    newRemaining.push(img);\n                }\n            }\n            pages.push(pagePlacements);\n            if (pagePlacements.length === 0) break; // Avoid infinite loop.\n            remaining = newRemaining;\n        }\n        return pages;\n    };\n\n\n\n\n    const handleCalculate = () => {\n        const pages = calculateLayout();\n        if (pages.length > 0) {\n            setCalcPages(pages);\n            setActiveCalcPage(0);\n            setShowCalcPopup(true);\n            console.log(\"Calculated layout:\", pages);\n        }\n    };\n\n    const handleGeneratePDF = async () => {\n        setPdfLoading(true);\n        let pageWidth, pageHeight;\n        if (pageFormat === \"Custom\") {\n            pageWidth = parseFloat(customPageWidth);\n            pageHeight = parseFloat(customPageHeight);\n        } else {\n            const dims = paperSizes[pageFormat];\n            pageWidth = dims.width;\n            pageHeight = dims.height;\n        }\n        if (orientation === \"landscape\") {\n            [pageWidth, pageHeight] = [pageHeight, pageWidth];\n        }\n        const pages = calculateLayout();\n        if (pages.length === 0) {\n            setPdfLoading(false);\n            return;\n        }\n        const pdf = new jsPDF({\n            orientation: orientation,\n            unit: 'mm',\n            format: [pageWidth, pageHeight]\n        });\n        for (let p = 0; p < pages.length; p++) {\n            if (p > 0) pdf.addPage([pageWidth, pageHeight], orientation);\n            for (let placement of pages[p]) {\n                const dataUrl = await getImageDataUrl(images[placement.index].src);\n                pdf.addImage(dataUrl, 'JPEG', placement.x, placement.y, placement.width, placement.height);\n            }\n        }\n        pdf.save(\"pixpact_output_\"+images.length+\"_images.pdf\");\n        setPdfLoading(false);\n    };\n\n    // Prepare preview for the calculated page in the Calculate popup.\n    let previewPageStyle = {};\n    let scaleFactor = 1;\n    if (pageFormat) {\n        let pageWidth, pageHeight;\n        if (pageFormat === \"Custom\") {\n            pageWidth = parseFloat(customPageWidth) || 210;\n            pageHeight = parseFloat(customPageHeight) || 297;\n        } else {\n            const dims = paperSizes[pageFormat];\n            pageWidth = dims.width;\n            pageHeight = dims.height;\n        }\n        if (orientation === \"landscape\") {\n            [pageWidth, pageHeight] = [pageHeight, pageWidth];\n        }\n        const aspectRatio = pageHeight / pageWidth;\n        const previewWidth = orientation === \"landscape\" ? 500 : 300;\n        const previewHeight = previewWidth * aspectRatio;\n        scaleFactor = previewWidth / pageWidth;\n        previewPageStyle = { width: previewWidth, height: previewHeight, position: 'relative', backgroundColor: '#fff' };\n    }\n\n    return (\n        <div className=\"home-container\">\n            {pdfLoading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-spinner\">Creating PDF...</div>\n                </div>\n            )}\n            <header className=\"header-container\">\n                <h1 className=\"header-title\">PixPact</h1>\n                <div className=\"header-links\">\n                    <a href=\"https://sayantan.is-a.dev\" target=\"_blank\" rel=\"noopener noreferrer\">Developer</a>\n                    <a href=\"https://github.com/legendsayantan/pixpact\" target=\"_blank\" rel=\"noopener noreferrer\">Source Code</a>\n                </div>\n            </header>\n\n            <div className=\"main-container\">\n                <div className=\"controls\">\n                    <div className=\"file-input-container\">\n                        <label htmlFor=\"fileInput\" className=\"file-label\">\n                            Select Images\n                        </label>\n                        <input\n                            id=\"fileInput\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            multiple\n                            className=\"file-input\"\n                            onChange={handleFiles}\n                            ref={fileInputRef}\n                        />\n                    </div>\n\n                    <div className=\"page-customization\">\n                        <h3>Page Customization</h3>\n                        <div className=\"form-group\">\n                            <label>Page Format:</label>\n                            <select\n                                value={pageFormat}\n                                onChange={(e) => setPageFormat(e.target.value)}\n                                className=\"styled-select\"\n                            >\n                                <option value=\"A4\">A4</option>\n                                <option value=\"Letter\">Letter</option>\n                                <option value=\"Legal\">Legal</option>\n                                <option value=\"A1\">A1</option>\n                                <option value=\"A3\">A3</option>\n                                <option value=\"A5\">A5</option>\n                                <option value=\"Tabloid\">Tabloid</option>\n                                <option value=\"Custom\">Custom</option>\n                            </select>\n                        </div>\n                        {pageFormat === \"Custom\" && (\n                            <div className=\"form-group hrzntl\">\n                                <input\n                                    type=\"number\"\n                                    placeholder=\"Width (mm)\"\n                                    value={customPageWidth}\n                                    onChange={(e) => setCustomPageWidth(e.target.value)}\n                                    className=\"styled-input\"\n                                />\n                                <input\n                                    type=\"number\"\n                                    placeholder=\"Height (mm)\"\n                                    value={customPageHeight}\n                                    onChange={(e) => setCustomPageHeight(e.target.value)}\n                                    className=\"styled-input\"\n                                />\n                            </div>\n                        )}\n                        <div className=\"form-group\">\n                            <label>Orientation:</label>\n                            <div className=\"orientation-options\">\n                                <label className=\"modern-radio\">\n                                    <input\n                                        type=\"radio\"\n                                        value=\"portrait\"\n                                        checked={orientation === \"portrait\"}\n                                        onChange={(e) => setOrientation(e.target.value)}\n                                    />\n                                    <span>Portrait</span>\n                                </label>\n                                <label className=\"modern-radio\">\n                                    <input\n                                        type=\"radio\"\n                                        value=\"landscape\"\n                                        checked={orientation === \"landscape\"}\n                                        onChange={(e) => setOrientation(e.target.value)}\n                                    />\n                                    <span>Landscape</span>\n                                </label>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div className=\"scale-customization\">\n                        <h3>Scale Customization</h3>\n                        <div className=\"form-group\">\n                            <label className=\"modern-radio\">\n                                <input\n                                    type=\"radio\"\n                                    value=\"percentage\"\n                                    checked={scaleOption === \"percentage\"}\n                                    onChange={(e) => setScaleOption(e.target.value)}\n                                />\n                                <span>Resolution Scale</span>\n                            </label>\n                            <label className=\"modern-radio\">\n                                <input\n                                    type=\"radio\"\n                                    value=\"columns\"\n                                    checked={scaleOption === \"columns\"}\n                                    onChange={(e) => setScaleOption(e.target.value)}\n                                />\n                                <span>Columns per Page</span>\n                            </label>\n                        </div>\n                        <div className=\"form-group\">\n                            {scaleOption === \"percentage\" ? (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        step=\"1\"\n                                        value={globalScale}\n                                        onChange={(e) => setGlobalScale(parseFloat(e.target.value))}\n                                        className=\"styled-input\"\n                                    />\n                                </>\n                            ) : (\n                                <>\n                                    <input\n                                        type=\"number\"\n                                        min=\"1\"\n                                        value={columnsPerPage}\n                                        onChange={(e) => setColumnsPerPage(parseInt(e.target.value, 10))}\n                                        className=\"styled-input\"\n                                    />\n                                </>\n                            )}\n                        </div>\n                    </div>\n\n                    <div className=\"form-group hrzntl\">\n                        <label>Border:</label>\n                        <input\n                            type=\"number\"\n                            value={pageBorder}\n                            onChange={(e) => setPageBorder(e.target.value)}\n                            className=\"styled-input\"\n                        />\n                    </div>\n                    <div className=\"form-group hrzntl\">\n                        <label>Margin:</label>\n                        <input\n                            type=\"number\"\n                            value={imageMargin}\n                            onChange={(e) => setImageMargin(e.target.value)}\n                            className=\"styled-input\"\n                        />\n                    </div>\n\n                    <div className=\"control-btns\">\n                        <button onClick={handleCalculate} className=\"control-btn calc-btn\">\n                            Preview\n                        </button>\n                        <button onClick={handleGeneratePDF} className=\"control-btn generate-btn\">\n                            Save as PDF\n                        </button>\n                    </div>\n                </div>\n\n                {\n                    images.length === 0 ? (\n                        <div className=\"empty-preview\">\n                            <h2>Add some images to effortlessly compact them into pages</h2>\n                            <p>provide mismatching images, of any size or resolution</p>\n                        </div>\n                    ) : (\n                        <div className=\"previews\">\n                            {images.map((img, index) => (\n                                <div key={index} className=\"preview-container\" onClick={() => openPopup(index)}>\n                                    <div className=\"preview-number\">{index + 1}</div>\n                                    <img\n                                        src={img.src}\n                                        alt={`Preview ${index}`}\n                                        className=\"preview-image\"\n                                    />\n                                    <div className=\"overlay\">\n                <span>\n                  {img.width} x {img.height}\n                </span>\n                                        <span>Scale: {img.overrideScale || \"Default\"}{img.overrideScale?\"%\":\"\"}</span>\n                                    </div>\n                                    <button\n                                        className=\"remove-btn\"\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            removeImage(index);\n                                        }}\n                                    >\n                                        &times;\n                                    </button>\n                                </div>\n                            ))}\n                        </div>\n                    )\n                }\n\n            </div>\n\n            {/* Customise popup for individual image */}\n            {popupImageIndex !== null && (\n                <div className=\"popup-overlay\" onClick={closePopup}>\n                    <div className=\"popup\" onClick={(e) => e.stopPropagation()}>\n                        <div className=\"popup-content\">\n                            <div className=\"popup-image-container\">\n                                <img src={images[popupImageIndex].src} alt=\"Large Preview\" />\n                            </div>\n                            <div className=\"popup-controls\">\n                                <h2>Customise</h2>\n                                <p>\n                                    Image dimensions: {images[popupImageIndex].width} x {images[popupImageIndex].height}\n                                </p>\n                                <div className=\"form-group\">\n                                    <label>Override Scale (%):</label>\n                                    <input\n                                        type=\"number\"\n                                        step=\"1\"\n                                        value={images[popupImageIndex].overrideScale}\n                                        onChange={(e) =>\n                                            handleOverrideChange(popupImageIndex, e.target.value)\n                                        }\n                                        className=\"popup-input styled-input\"\n                                    />\n                                </div>\n                                <div className=\"popup-btn-group\">\n                                    <button\n                                        onClick={() => {\n                                            removeImage(popupImageIndex);\n                                            closePopup();\n                                        }}\n                                        className=\"popup-btn\"\n                                    >\n                                        Remove Image\n                                    </button>\n                                    <button onClick={closePopup} className=\"popup-btn\">\n                                        Close\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {/* Calculate Layout Popup with vertical arrangement */}\n            {showCalcPopup && calcPages && (\n                <div className=\"popup-overlay\" onClick={() => setShowCalcPopup(false)}>\n                    <div className=\"popup calc-popup-vertical\" onClick={(e) => e.stopPropagation()}>\n                        <h2 className=\"calc-heading\">Layout Preview</h2>\n                        <div className=\"calc-tabs\">\n                            {calcPages.map((page, idx) => (\n                                <button\n                                    key={idx}\n                                    className={`calc-tab ${activeCalcPage === idx ? \"active\" : \"\"}`}\n                                    onClick={() => setActiveCalcPage(idx)}\n                                >\n                                    {idx + 1}\n                                </button>\n                            ))}\n                        </div>\n                        <div className=\"calc-preview-container-vertical\">\n                            {(() => {\n                                let pageWidth, pageHeight;\n                                if (pageFormat === \"Custom\") {\n                                    pageWidth = parseFloat(customPageWidth) || 210;\n                                    pageHeight = parseFloat(customPageHeight) || 297;\n                                } else {\n                                    const dims = paperSizes[pageFormat];\n                                    pageWidth = dims.width;\n                                    pageHeight = dims.height;\n                                }\n                                if (orientation === \"landscape\") {\n                                    [pageWidth, pageHeight] = [pageHeight, pageWidth];\n                                }\n                                const aspectRatio = pageHeight / pageWidth;\n                                const previewWidth = orientation === \"landscape\" ? 500 : 300;\n                                const previewHeight = previewWidth * aspectRatio;\n                                const scaleFactor = previewWidth / pageWidth;\n                                return (\n                                    <div\n                                        className=\"calc-preview-page\"\n                                        style={{ width: previewWidth, height: previewHeight }}\n                                    >\n                                        {calcPages[activeCalcPage].map(item => (\n                                            <div\n                                                key={item.index}\n                                                style={{\n                                                    position: 'absolute',\n                                                    left: item.x * scaleFactor,\n                                                    top: item.y * scaleFactor,\n                                                    width: item.width * scaleFactor,\n                                                    height: item.height * scaleFactor,\n                                                    border: '2px dashed #FFD700', // deep yellow border\n                                                    boxSizing: 'border-box'\n                                                }}\n                                            >\n                                                <img\n                                                    src={images[item.index].src}\n                                                    alt={`Image ${item.index + 1}`}\n                                                    style={{\n                                                        width: '100%',\n                                                        height: '100%',\n                                                        display: 'block'\n                                                    }}\n                                                />\n                                                <div\n                                                    style={{\n                                                        position: 'absolute',\n                                                        top: 0,\n                                                        left: 0,\n                                                        background: '#ff5722', // or another color for contrast\n                                                        color: '#fff',\n                                                        padding: '2px 4px',\n                                                        fontSize: '10px'\n                                                    }}\n                                                >\n                                                    {item.index + 1}\n                                                </div>\n                                            </div>\n                                        ))}\n\n                                    </div>\n                                );\n                            })()}\n                        </div>\n                        <button onClick={() => setShowCalcPopup(false)} className=\"popup-btn\">\n                            Close\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PixPact;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PixPact from \"./PixPact.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PixPact/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}